#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys

import cv2
import numpy as np

import cv_bridge
import message_filters
import rospy
from sensor_msgs.msg import Image
from skimage.util import img_as_uint


class ExtractDepth(object):

    def __init__(self):
        self.seq = 0
        self.fname_fmt = rospy.get_param('~filename_format', 'frame%04i.jpg')
        self.dynamic_scale = rospy.get_param('~dynamic_scale', True)
        self.bridge = cv_bridge.CvBridge()
        self.sub = rospy.Subscriber('image', Image, self._save)

    def _save(self, imgmsg):
        seq = self.seq
        img = self.bridge.imgmsg_to_cv2(imgmsg)
        if self.dynamic_scale:
            img = img.astype(float)
            img = img / img.max() * 255  # dynamic scaling
        else:
            img = img_as_uint(img)  # float to 16bit uchar
            img /= 2**8  # 16bit to 8bit
        img = img.astype(np.uint8)
        fname = self.fname_fmt % seq
        print('Save image as {0}'.format(fname))
        cv2.imwrite(fname, img)
        self.seq = seq + 1


if __name__ == '__main__':
    rospy.init_node('extract_depth')
    extractor = ExtractDepth()
    rospy.spin()
